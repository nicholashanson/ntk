#ifndef TEST_CONSTANTS
#define TEST_CONSTANTS

namespace test {

    //inline const unsigned char http_partial_request[] = {}

    inline const unsigned char mp4_meta_data[] = {

        /* ftyp box ( file type box ) */
        0x00, 0x00, 0x00, 0x20,                     // length : 32 bytes
        0x66, 0x74, 0x79, 0x70,                     // ftyp
        0x69, 0x73, 0x6f, 0x6d,                     // major brand : isom
        0x00, 0x00, 0x02, 0x00,                     // minor version
                                 
        /* compatible brands */
        0x69, 0x73, 0x6f, 0x6d,                     // isom: ISO Base Media File Format  
        0x69, 0x73, 0x6f, 0x32,                     // iso2: ISO BMFF Version 2
        0x61, 0x76, 0x63, 0x31,                     // avc1: AVC/H.264 video
        0x6d, 0x70, 0x34, 0x31,                     // mp41: MPEG-4 version 1

        /* moov Box */
        0x00, 0x00, 0x00, 0x6c,                     // size: 108 bytes
        0x6d, 0x6f, 0x6f, 0x76,                     // moov Box ( Movie Box )

        0x6d, 0x76, 0x68, 0x64,                     // mvhd
        0x00,                                       // version
        0x00, 0x00, 0x00,                           // flags
        0x00, 0x00, 0x00, 0x00,                     // creation time
        0x00, 0x00, 0x00, 0x00,                     // modification time
        0x00, 0x00, 0x03, 0xe8,                     // timescale = 1000
        0x00, 0x02, 0x79, 0xe9,                     // duration = 162,153

        /* rate ( 16.16 fixed ) = 1.0 */
        0x00, 0x01, 0x00, 0x00,

        /* volume ( 8.8 fixed ) = 1.0 */
        0x01, 0x00,

        /* reserved 2 bytes */
        0x00, 0x00,

        /* reserved 8 bytes ( 2 Ã— 4 bytes ) */
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00,

        /* matrix structure ( 36 bytes ) */
        0x00, 0x01, 0x00, 0x00,                     // [0][0] = 1.0
        0x00, 0x00, 0x00, 0x00,                     // [0][1] = 0.0
        0x00, 0x00, 0x00, 0x00,                     // [0][2] = 0.0
        0x00, 0x01, 0x00, 0x00,                     // [1][0] = 1.0 
        0x00, 0x00, 0x00, 0x00,                     // [1][1] = 0.0
        0x00, 0x00, 0x00, 0x00,                     // [1][2] = 0.0
        0x00, 0x00, 0x40, 0x00,                     // [2][0] = 16384 (fixed-point)
        0x00, 0x00, 0x00, 0x00,                     // [2][1] = 0
        0x00, 0x00, 0x00, 0x00,                     // [2][2] = 0

        /* pre-defined ( reserved 24 bytes ) */
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00,

        /* next track ID */
        0x00, 0x00, 0x03, 0x00
    };

    inline const unsigned char tcp_syn_packet[] = {
        /* ethernet header */
        // destination mac address
        0x14, 0xf6, 0xd8, 0xaa, 0x69, 0xfa, 
        // source mac address
        0x42, 0x8b, 0x4e, 0x1a, 0xce, 0xd9,
        // ether-type
        0x08, 0x00, // 0x08 indicates ipv4
        
        /* ipv4 header */
        // version and header length
        0x45, // version = 4, header length = 5 * 4 = 20 bytes
        // DSCP and ECN
        0x00,
        // total length of packet
        0x00, 0x3c, 
        // identification
        0x44, 0xeb, 
        // flags and fragment offset
        0x40, 0x00, 
        // time-to-live
        0x40, 
        // protocol
        0x06, // TCP protocol
        // header checksum
        0x74, 0x57, 
        // source IP address
        0xc0, 0xa8, 0x00, 0x14, 
        // destination IP address
        0xc0, 0xa8, 0x00, 0x15,

        /* tcp header */
        // source port
        0xac, 0x18,
        // destination port
        0x0b, 0xb8,
        // sequence number
        0xb9, 0x20, 0xc9, 0xb3, 
        // acknowledgment number
        0x00, 0x00, 0x00, 0x00, 
        // data offset and reserved
        0xa0, 
        // flags ( SYN )
        0x02, 
        // window size
        0xff, 0xff, 
        // checksum
        0x17, 0x6e, 
        // urgent pointer
        0x00, 0x00, 

        /* tcp options */                                               /* tcp options */
        0x02, 0x04, 0x05, 0xb4,                                         // maximum segment size (MSS) = 1460
        0x04, 0x02,                                                     // selective acknowledgment permitted
        0x08, 0x0a, 0x02, 0x0d, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00,     // timestamp option
        0x01,                                                           // no operation
        0x03, 0x03, 0x09                                                // window scale factor 
    };   

    inline const unsigned char tcp_synack_packet[] = {
        /* ethernet header */
        // destination mac address
        0x42, 0x8b, 0x4e, 0x1a, 0xce, 0xd9,
        // source mac address
        0x14, 0xf6, 0xd8, 0xaa, 0x69, 0xfa,
        // ether-type (IPv4)
        0x08, 0x00,
        
        /* ipv4 header */
        0x45,       // Version (4) + IHL (5)
        0x00,       // DSCP + ECN
        0x00, 0x3c, // Total Length = 60 bytes
        0x00, 0x00, // Identification
        0x40, 0x00, // Flags + Fragment Offset
        0x40,       // TTL = 64
        0x06,       // Protocol = TCP
        0xb9, 0x42, // Header checksum
        0xc0, 0xa8, 0x00, 0x15, // Source IP: 192.168.0.21
        0xc0, 0xa8, 0x00, 0x14, // Destination IP: 192.168.0.20

        /* tcp header */
        0x0b, 0xb8,             // Source port = 3000
        0xac, 0x18,             // Destination port = 44056
        0xd3, 0xc1, 0xea, 0x09, // Sequence number
        0xb9, 0x20, 0xc9, 0xb4, // Acknowledgment number
        0xa0,                   // Data offset (10) << 4 + Reserved
        0x12,                   // Flags: SYN and ACK
        0xfe, 0x88,             // Window size
        0x81, 0xa8,             // Checksum
        0x00, 0x00,             // Urgent pointer

        /* tcp options */
        0x02, 0x04, 0x05, 0xb4,                                     // MSS = 1460
        0x04, 0x02,                                                 // SACK permitted
        0x08, 0x0a, 0x58, 0x64, 0xbc, 0x69, 0x02, 0x0d, 0x72, 0x64, // Timestamp
        0x01,                                                       // NOP 
        0x03, 0x03, 0x07                                            // Window scale
    };

    inline const unsigned char tcp_ack_packet[] = {
        /* ethernet header */
        // destination MAC address (server)
        0x14, 0xf6, 0xd8, 0xaa, 0x69, 0xfa,
        // source MAC address (client)
        0x42, 0x8b, 0x4e, 0x1a, 0xce, 0xd9,
        // ether-type (IPv4)
        0x08, 0x00,

        /* ipv4 header */
        0x45,             // Version = 4, IHL = 5 (20 bytes)
        0x00,             // DSCP + ECN
        0x00, 0x34,       // Total Length = 52 bytes
        0x44, 0xec,       // Identification
        0x40, 0x00,       // Flags + Fragment Offset
        0x40,             // TTL = 64
        0x06,             // Protocol = TCP
        0x74, 0x5e,       // Header checksum
        0xc0, 0xa8, 0x00, 0x14, // Source IP: 192.168.0.20
        0xc0, 0xa8, 0x00, 0x15, // Destination IP: 192.168.0.21

        /* tcp header */
        0xac, 0x18,             // Source port = 44056
        0x0b, 0xb8,             // Destination port = 3000
        0xb9, 0x20, 0xc9, 0xb4, // Sequence number
        0xd3, 0xc1, 0xea, 0x0a, // Acknowledgment number
        0x80,                   // Data offset (8) << 4, Reserved
        0x10,                   // Flags = ACK
        0x00, 0x80,             // Window size
        0x72, 0xde,             // Checksum
        0x00, 0x00,             // Urgent pointer

        /* tcp options */
        0x01,                                                           // NOP
        0x01,                                                           // NOP
        0x08, 0x0a, 0x02, 0x0d, 0x72, 0x97, 0x58, 0x64, 0xbc, 0x69      // timestamp             
    };    

    inline const unsigned char http_get_packet[] = {
        /* Ethernet header */
        // Destination MAC address (server)
        0x14, 0xf6, 0xd8, 0xaa, 0x69, 0xfa,
        // Source MAC address (client)
        0x42, 0x8b, 0x4e, 0x1a, 0xce, 0xd9,
        // EtherType (IPv4)
        0x08, 0x00,

        /* IPv4 header */
        0x45,             // Version (4) + IHL (5)
        0x00,             // DSCP + ECN
        0x01, 0x96,       // Total length: 406 bytes
        0x44, 0xed,       // Identification
        0x40, 0x00,       // Flags + Fragment offset
        0x40,             // TTL
        0x06,             // Protocol (TCP)
        0x72, 0xfb,       // Header checksum
        0xc0, 0xa8, 0x00, 0x14, // Source IP: 192.168.0.20
        0xc0, 0xa8, 0x00, 0x15, // Destination IP: 192.168.0.21

        /* TCP header */
        0xac, 0x18,             // Source port: 44056
        0x0b, 0xb8,             // Destination port: 3000
        0xb9, 0x20, 0xc9, 0xb4, // Sequence number
        0xd3, 0xc1, 0xea, 0x0a, // Acknowledgment number
        0x80,                   // Data offset (8) << 4, Reserved
        0x18,                   // Flags: PSH + ACK
        0x00, 0x80,             // Window size
        0x4b, 0x81,             // Checksum
        0x00, 0x00,             // Urgent pointer

        /* TCP options */
        0x01,                                                       // NOP
        0x01,                                                       // NOP
        0x08, 0x0a, 0x02, 0x0d, 0x72, 0x9a, 0x58, 0x64, 0xbc, 0x69, // timestamp            

        /* HTTP GET request */
        // Request Line: "GET / HTTP/1.1\r\n"
        0x47, 0x45, 0x54,           // 'G' 'E' 'T'          -> HTTP method
        0x20,                     // ' ' (space)
        0x2f,                     // '/' (root path)
        0x20,                     // ' ' (space)
        0x48, 0x54, 0x54, 0x50,  // 'H' 'T' 'T' 'P'
        0x2f,                     // '/'
        0x31, 0x2e, 0x31,         // '1' '.' '1'          -> HTTP version 1.1
        0x0d, 0x0a,               // '\r\n'                -> End of request line
        // Header: "Host: 192.168.0.21:3000\r\n"
        0x48, 0x6f, 0x73, 0x74,   // 'H' 'o' 's' 't'
        0x3a, 0x20,               // ':' ' ' (separator)
        0x31, 0x39, 0x32, 0x2e,  // '1' '9' '2' '.' 
        0x31, 0x36, 0x38, 0x2e,  // '1' '6' '8' '.'
        0x30, 0x2e, 0x32, 0x31,  // '0' '.' '2' '1'
        0x3a,                     // ':'
        0x33, 0x30, 0x30, 0x30,   // '3' '0' '0' '0'       -> port 3000
        0x0d, 0x0a,               // '\r\n'                -> end of Host header
        // Header: "User-Agent: Mozilla/5.0 (Android 14; Mobile; rv:109.0) Gecko/112.0 Firefox/112.0\r\n"
        0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74,       // "User-Agent"
        0x3a, 0x20,                                                       // ": "
        0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, // "Mozilla/5.0"
        0x20,                                                             // ' '
        0x28,                                                             // '('
        0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x20, 0x31, 0x34,       // "Android 14"
        0x3b, 0x20,                                                       // "; "
        0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,                               // "Mobile"
        0x3b, 0x20,                                                       // "; "
        0x72, 0x76, 0x3a, 0x31, 0x30, 0x39, 0x2e, 0x30,                   // "rv:109.0"
        0x29,                                                             // ')'
        0x20,                                                             // ' '
        0x47, 0x65, 0x63, 0x6b, 0x6f, 0x2f, 0x31, 0x31, 0x32, 0x2e, 0x30, // "Gecko/112.0"
        0x20,                                                             // ' '
        0x46, 0x69, 0x72, 0x65, 0x66, 0x6f, 0x78, 0x2f, 0x31, 0x31, 0x32, 0x2e, 0x30, // "Firefox/112.0"
        0x0d, 0x0a,                                                                   // '\r\n'
        // Header: "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\r\n"
        0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x20,           // "Accept: "
        0x74, 0x65, 0x78, 0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c,     // "text/html"
        0x2c,                                                     // ','
        0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x2b, 0x78, 0x6d, 0x6c, // "application/xhtml+xml"
        0x2c,                                                     // ','
        0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x6d, 0x6c,               // "application/xml"
        0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x39,                       // ";q=0.9"
        0x2c,                                                     // ','
        0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x76, 0x69, 0x66, // "image/avif"
        0x2c,                                                     // ','
        0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x77, 0x65, 0x62, 0x70, // "image/webp"
        0x2c,                                                     // ','
        0x2a, 0x2f, 0x2a,                                         // "*/*"
        0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x38,                       // ";q=0.8"
        0x0d, 0x0a,                                               // '\r\n'
        // Header: "Accept-Language: en-GB,en-US;q=0.7,zh-CN;q=0.3\r\n"
        0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, // "Accept-Language: "
        0x65, 0x6e, 0x2d, 0x47, 0x42,                             // "en-GB"
        0x2c,                                                     // ','
        0x65, 0x6e, 0x2d, 0x55, 0x53,                             // "en-US"
        0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x37,                       // ";q=0.7"
        0x2c,                                                     // ','
        0x7a, 0x68, 0x2d, 0x43, 0x4e,                             // "zh-CN"
        0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x33,                       // ";q=0.3"
        0x0d, 0x0a,                                               // '\r\n'
        // Header: "Accept-Encoding: gzip, deflate\r\n"
        0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, // "Accept-Encoding: "
        0x67, 0x7a, 0x69, 0x70,                                   // "gzip"
        0x2c, 0x20,                                               // ", "
        0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65,                 // "deflate"
        0x0d, 0x0a,                                               // '\r\n'
        // Header: "Connection: keep-alive\r\n"
        0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, // "Connection: "
        0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65,               // "keep-alive"
        0x0d, 0x0a,                                                               // '\r\n'
        // Header: "Upgrade-Insecure-Requests: 1\r\n"
        0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x20, // "Upgrade-Insecure-Requests: "
        0x31,                                                                       // '1'
        0x0d, 0x0a,                                                                 // '\r\n'
        // End of headers: blank line \r\n
        0x0d, 0x0a                                                                // End of HTTP headers, no body follows
    }; 

    inline const unsigned char tcp_ack_get_packet[] = {
        /* Ethernet header */
        // destination mac address
        0x14, 0xf6, 0xd8, 0xaa, 0x69, 0xfa, 
        // source mac address
        0x42, 0x8b, 0x4e, 0x1a, 0xce, 0xd9,
        // ether-type
        0x08, 0x00, // 0x08 indicates ipv4
        
        /* IPv4 header */
        // version and header length
        0x45, // version = 4, header length = 5 * 4 = 20 bytes
        // DSCP and ECN
        0x00,
        // total length of packet
        0x00, 0x34, 
        // identification
        0x80, 0x9c, 
        // flags and fragment offset
        0x40, 0x00, 
        // time-to-live
        0x40, 
        // protocol
        0x06, // TCP protocol
        // header checksum
        0x38, 0xae, 
        // source IP address
        0xc0, 0xa8, 0x00, 0x15, 
        // destination IP address
        0xc0, 0xa8, 0x00, 0x14,

        /* TCP header */
        // source port
        0x0b, 0xb8, 
        // destination port
        0xac, 0x18,
        // sequence number
        0xd3, 0xc1, 0xea, 0x0a, 
        // acknowledgment number
        0xb9, 0x20, 0xcb, 0x16, 
        // data offset and reserved
        0x80, 
        // flags (ACK)
        0x10, 
        // window size
        0x01, 0xfb, 
        // checksum
        0x81, 0xa0, 
        // urgent pointer
        0x00, 0x00, 
        
        /* TCP options */
        0x01,                                                      // NOP
        0x01,                                                      // NOP
        0x08, 0x0a, 0x58, 0x64, 0xbc, 0x6f, 0x02, 0x0d, 0x72, 0x9a // timestamp
    };    

    inline const unsigned char http_response_packet[] = {
        /* Ethernet header */
        // destination mac address
        0x42, 0x8b, 0x4e, 0x1a, 0xce, 0xd9,
        // source mac address
        0x14, 0xf6, 0xd8, 0xaa, 0x69, 0xfa,
        // ether-type
        0x08, 0x00, // 0x08 indicates ipv4

        /* IPv4 header */
        // version and header length
        0x45, // version = 4, header length = 5 * 4 = 20 bytes
        // DSCP and ECN
        0x00,   
        // total length of packet
        0x01, 0x03, 
        // identification
        0x80, 0x9d, 
        // flags and fragment offset
        0x40, 0x00, 
        // time-to-live
        0x40, 
        // protocol
        0x06, // TCP protocol
        // header checksum
        0x37, 0xde, 
        // source IP address
        0xc0, 0xa8, 0x00, 0x15, 
        // destination IP address
        0xc0, 0xa8, 0x00, 0x14,

        /* TCP header */
        // source port
        0x0b, 0xb8, 
        // destination port
        0xac, 0x18,
        // sequence number
        0xd3, 0xc1, 0xea, 0x0a, 
        // acknowledgment number
        0xb9, 0x20, 0xcb, 0x16, 
        // data offset and reserved
        0x80, 
        // flags (ACK)
        0x18, 
        // window size
        0x01, 0xfb, 
        // checksum
        0x82, 0x6f, 
        // urgent pointer
        0x00, 0x00, 
        
        /* TCP options */
        0x01, 0x01, // No-Operation (NOP) options
        0x08, 0x0a, // timestamp option
        0x58, 0x64, 0xbc, 0x70, // timestamp value (TSval)
        0x02, 0x0d, 0x72, 0x9a, // timestamp echo reply (TSecr)

        /* HTTP Response */
        // HTTP version and status code
        0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, // HTTP/1.1 200 OK
        0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x74, 0x65, 0x78, // Content-Type: text/plain
        0x74, 0x2f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x0d, 0x0a, // text/plain
        0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x54, 0x75, 0x65, 0x2c, 0x20, 0x31, 0x33, 0x20, 0x4d, 0x61, 0x79, // Date: Tue, 13 May 2025 08:07:35 GMT
        0x20, 0x32, 0x30, 0x32, 0x35, 0x20, 0x30, 0x38, 0x3a, 0x30, 0x37, 0x3a, 0x33, 0x35, 0x20, 0x47, 0x4d, 
        0x54, 0x0d, 0x0a, // GMT
        0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x2d, // Connection: keep-alive
        0x61, 0x6c, 0x69, 0x76, 0x65, 0x0d, 0x0a, 
        0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, // Keep-Alive: timeout=5
        0x75, 0x74, 0x3d, 0x35, 0x0d, 0x0a, 
        0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, // Transfer-Encoding: chunked
        0x3a, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x0d, 0x0a, 
        0x0d, 0x0a, // End of headers

        /* HTTP Body */
        0x32, 0x37, 0x0d, 0x0a, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x20, // "27\nHello, World from Node.js HTTP server!\n"
        0x66, 0x72, 0x6f, 0x6d, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x6a, 0x73, 0x20, 0x48, 0x54, 0x54, 0x50, 
        0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x21, 0x0a, 0x0d, 0x0a, 0x30, 0x0d, 0x0a, 0x0d, 0x0a // End of body
    };    

    inline const unsigned char tcp_ack_response_packet[] = {
        /* Ethernet header */
        // destination MAC address
        0x14, 0xf6, 0xd8, 0xaa, 0x69, 0xfa,
        // source MAC address
        0x42, 0x8b, 0x4e, 0x1a, 0xce, 0xd9,
        // EtherType (IPv4)
        0x08, 0x00,

        /* IPv4 header */
        // version + header length
        0x45, // version = 4, header length = 5 (20 bytes)
        // Type of Service (ToS)
        0x00,
        // Total Length
        0x00, 0x34, 
        // Identification
        0x44, 0xee, 
        // Flags + Fragment Offset
        0x40, 0x00, 
        // TTL (Time to Live)
        0x40, 
        // Protocol (TCP)
        0x06, 
        // Header Checksum
        0x74, 0x5c, 
        // Source IP Address
        0xc0, 0xa8, 0x00, 0x14, 
        // Destination IP Address
        0xc0, 0xa8, 0x00, 0x15,

        /* TCP header */
        // Source Port
        0xac, 0x18,
        // Destination Port
        0x0b, 0xb8,
        // Sequence Number
        0xb9, 0x20, 0xcb, 0x16,
        // Acknowledgment Number
        0xd3, 0xc1, 0xea, 0xd9,
        // Data Offset + Reserved
        0x80, 
        // Flags (ACK)
        0x10,
        // Window Size
        0x00, 0x83,
        // Checksum
        0x70, 0x9d,
        // Urgent Pointer
        0x00, 0x00,

        /* TCP options */
        0x01, // NOP 
        0x01, // NOP 
        0x08, 0x0a, 0x02, 0x0d, 0x72, 0x9d, 0x58, 0x64, 0xbc, 0x70 // timestamp
    };   

    inline const unsigned char tcp_ack_of_ack_packet[] = {
        /* Ethernet Header */
        // Destination MAC address
        0x42, 0x8b, 0x4e, 0x1a, 0xce, 0xd9,
        // Source MAC address
        0x14, 0xf6, 0xd8, 0xaa, 0x69, 0xfa,
        // EtherType (0x0800 = IPv4)
        0x08, 0x00,
        
        /* IPv4 Header */
        // Version (4) and Header Length (5, meaning 20 bytes)
        0x45,
        // Type of Service (0)
        0x00,
        // Total Length (0x0034 = 52 bytes)
        0x00, 0x34,
        // Identification
        0x80, 0x9e,
        // Flags and Fragment Offset (0x4000, no fragmentation)
        0x40, 0x00,
        // Time-to-Live (TTL) = 64
        0x40,
        // Protocol (0x06 = TCP)
        0x06,
        // Header Checksum
        0x74, 0x5c,
        // Source IP address (192.168.0.21)
        0xc0, 0xa8, 0x00, 0x15,
        // Destination IP address (192.168.0.20)
        0xc0, 0xa8, 0x00, 0x14,
        
        /* TCP Header */
        // Source port (0x0bb8 = 3032)
        0x0b, 0xb8,
        // Destination port (0xac18 = 44248)
        0xac, 0x18,
        // Sequence number (0xd3c1ead9)
        0xd3, 0xc1, 0xea, 0xd9,
        // Acknowledgment number (0xb920cb16)
        0xb9, 0x20, 0xcb, 0x16,
        // Data Offset & Reserved (0x80)
        0x80,
        // Flags (0x11 = ACK, Push flag set)
        0x11,
        // Window size (0x01fb = 511)
        0x01, 0xfb,
        // Checksum (0x81a0)
        0x81, 0xa0,
        // Urgent pointer (0x0000)
        0x00, 0x00,
        
        /* TCP Options */
        0x01, // NOP 
        0x01, // NOP
        0x08, 0x0a, 0x58, 0x64, 0xcf, 0xfc, 0x02, 0x0d, 0x72, 0x9d // timestamp
    };


    inline const unsigned char ethernet_frame_udp[] = {
        /* ethernet header */
        // destination mac address
        0x04, 0x81, 0x9b, 0x17, 0x26, 0x81,
        // source mac address
        0x14, 0xf6, 0xd8, 0xaa, 0x69, 0xfa, 
        // ether-type
        0x08, 0x00, // 0x08 indicates ipv4
        
        /* ipv4 header */
        // version and header length
        0x45, // version = 4, header length = 5 X 4 = 20 bytes
        // DSCP and ECN
        0x00,
        // total length of packet
        0x00, 0x3f, 
        // identification
        0xdd, 0x2e, 
        // flags and fragment offset
        0x40, 0x00, 
        // time-to-live
        0x40, 
        // protocol
        0x11,
        // header checksum
        0x00, 0x00, 
        // source IP address
        0xc0, 0xa8, 0x00, 0x15, 
        // destination IP address
        0xad, 0xc2, 0x03, 0x49,

        /* udp header */
        // source port
        0x01, 0xbb,
        // destination port
        0xce, 0xb9, 
        // length
        0x04, 0xea, 
        // checksum
        0x01, 0xb8
    };

    inline const unsigned char ethernet_frame_tcp[] = {
        /* ethernet header */
        // destination mac address
        0x14, 0xf6, 0xd8, 0xaa, 0x69, 0xfa,
        // source mac address
        0x04, 0x81, 0x9b, 0x17, 0x26, 0x81,
        // ether-type 
        0x08, 0x00,

        /* ipv4 header */
        0x45, 
        0x00, 
        0x01, 0xf9, 
        0x34, 0x64, 
        0x40, 0x00,
        0x70,
        // protocol 
        0x06, 
        0xbe, 0x5e, 
        0x14, 0x2a, 0x41, 0x55,
        0xc0, 0xa8, 0x00, 0x15,

        /* TCP header */
        // source port
        0x01, 0xbb, 
        // destination port
        0xcd, 0xcc, 
        // sequence number
        0x9f, 0xa5, 0x08, 0x57,
        // acknowledgment number
        0x1d, 0x42, 0x03, 0xb7, 
        // data offset
        0x50, 0x19, 
        // window size
        0x40, 0x02,
        // checksum
        0x95, 0x2f, 
        // urgent pointer
        0x00, 0x00
    };

} // test

#endif